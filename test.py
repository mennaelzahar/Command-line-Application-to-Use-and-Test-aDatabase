# -*- coding: utf-8 -*-
"""test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdnIhFOrz-Qc_6V-TBwG-osbul5dxeS2
"""

!pip install google-colab-shell
!pip install mysqlclient

# -*- coding: utf-8 -*-
"""test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdnIhFOrz-Qc_6V-TBwG-osbul5dxeS2
"""
# -*- coding: utf-8 -*-
"""test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdnIhFOrz-Qc_6V-TBwG-osbul5dxeS2
"""

from MySQLdb import _mysql
import argparse
import re   
import pandas
# import the module once
from google_colab_shell import getshell

def check_NewReview_arguments():
    if (args.Username and args.Stadium_name and args.Match_date and args.Rating and args.Review):
        return True
    else:
        print ("The arguments provided are not sufficient to create a new review")
        return False

def rating_is_valid():
    if(int(args.Rating) >=1 and int(args.Rating)<=10):
        return True
    else:
        print ("Invalid rating value. Please enter an integer between 1 and 5")
        return False


def check_NewUser_arguments():
    if args.Email and args.Username and args.Gender and args.Birthdate and args.Favorite_Team:
        return True
    else:
        print ("The arguments provided are not sufficient to create a new user")  
        return False

def email_is_valid(email):
    regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
    if(re.search(regex, email)):
        return True
    else:
        print ("Invalid email address. Please enter an email in the form something@something.something")
        return False

def gender_is_valid():
    if(args.Gender == "m" or args.Gender == "f"):
        return True
    else:
        print ("Invalid gender value. Please enter gender in the form of 'm' or 'f' ")
        return False

def date_is_valid(date):
    regex = '^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$'
    if(re.search(regex, date)):
        return True
    else:
        print ("Invalid Birthdate value. Please enter birthdate in the form of 'YYYY-MM-DD'")
        return False


db=_mysql.connect("www.db4free.net","melzahar","12345678","prem_league_db")

parser = argparse.ArgumentParser(description= "Premier League Command Line Application")

parser.add_argument("-r", "--Add_Review", action='store_true' , help = "Add a new user review on a match")
#parser.add_argument("-n", "--Username" , help = "User's username")
parser.add_argument("-s", "--Stadium_name" , help = "Stadiumn name of reviewed match")
parser.add_argument("-d", "--Match_date" , help = "Reviewed match date")
parser.add_argument("-t", "--Rating" , help = "Review rating")
parser.add_argument("-w", "--Review" , help = "Review comment")


parser.add_argument("-v", "--View_Review", action='store_true', help = "View existing reviews on a given match")
#parser.add_argument("-s", "--Stadium_name" , help = "Stadiumn name of reviewed match")
#parser.add_argument("-d", "--Match_date" , help = "Reviewed match date")

parser.add_argument("-u", "--New_User" ,  action='store_true', help = "Register a new user")
parser.add_argument("-e", "--Email" , help = "User's email")
parser.add_argument("-n", "--Username" , help = "User's username")
parser.add_argument("-g", "--Gender" , help = "User's gender")
parser.add_argument("-b", "--Birthdate" , help = "User's birthdate")
parser.add_argument("-f", "--Favorite_Team" , help = "User's favorite team")
parser.add_argument("-z", "--Season" , help = "One of the last four seasons")

parser.add_argument("--Get_players_by_nationality",  help = "Show all the players from a certain nationality and their home teams history ")
parser.add_argument("--Get_player_info", help = "Show a given player information")
parser.add_argument("--Get_team_info", help = "Show a given team information")
parser.add_argument("--Get_players_by_position",  help = "Show all the players who played a certain position")

parser.add_argument("--Get_HomeTeam_of_stadium", help = "Show the home team for a given stadium name")

parser.add_argument("--Get_top_team_of_season", help = "Show all the teams who won the most games by season")

parser.add_argument("--Get_top10_by_Matches", action='store_true', help = "Show the top 10 teams by matches won")
parser.add_argument("--Get_top10_by_HomeMatches", action='store_true', help = "Show the top 10 teams by home matches won")
parser.add_argument("--Get_top10_by_YellowCards", action='store_true', help = "Show the top 10 teams by yellow cards")
parser.add_argument("--Get_top10_by_fouls", action='store_true', help = "Show the top 10 teams by fouls")
parser.add_argument("--Get_top10_by_shots", action='store_true', help = "Show the top 10 teams by shots")

args = parser.parse_args()


if args.Add_Review:
    print ("Creating new Review...")
    if check_NewReview_arguments()  and date_is_valid(args.Match_date) and rating_is_valid():
        print (("User's Username is (% s)") % (args.Username))
        print (("Reviewed match stadium is (% s)") % (args.Stadium_name))
        print (("Review match date is (% s)") % (args.Match_date))
        print (("Review rating is (% s)") % (args.Rating))
        print (("The user's review is (% s)") % (args.Review))
        db.query("SET FOREIGN_KEY_CHECKS=0;")
        query = "INSERT INTO review VALUES ('%s' , '%s', '%s', '%s', '%s')" % (args.Username,args.Match_date,args.Stadium_name, args.Rating, args.Review)
        #print (query)
        db.query(query)
        db.query("SET FOREIGN_KEY_CHECKS=1;")

if args.View_Review:
    if args.Stadium_name and args.Match_date:
        print("Viewing reviews on match of date %s held at %s" %(args.Match_date, args.Stadium_name))
        query = "SELECT FanUsername, MatchDate, Stadium_Name, rating, textual_review FROM review WHERE MatchDate = '%s' AND Stadium_Name = '%s'" %(args.Match_date, args.Stadium_name)
        #print (query)
        db.query(query)
        r=db.store_result()
        r = r.fetch_row(maxrows = 0, how = 1)
        print ("{:<40} {:<20} {:<50} {:<20} {:<20}".format("Username", "Match date", "Stadium name","Rating", "Review" ))
        for element in r:
            print("{:<40} {:<20} {:<50} {:<20} {:<20}".format(element["FanUsername"].decode("utf-8"), element["MatchDate"].decode("utf-8"), element["Stadium_Name"].decode("utf-8"), element["rating"].decode("utf-8"), element["textual_review"].decode("utf-8")))
    else:
        print("Please specify the stadium name and date of the match you want to view its reviews")

if args.New_User:
    print ("Creating new user...")
    if check_NewUser_arguments() and email_is_valid(args.Email) and gender_is_valid() and date_is_valid(args.Birthdate) and args.Favorite_Team:
        print (("User's email is (% s)") % (args.Email))
        print (("User's username is (% s)") % (args.Username))
        print (("User's gender is (% s)") % (args.Gender))
        print (("User's birthdate is (% s)") % (args.Birthdate))
        print (("User's favorite team is (% s)") % (args.Favorite_Team))
        values = args.Username + "," + args.Email
        query = "INSERT INTO fan VALUES ('%s' , '%s', '%s', '%s', '%s')" % (args.Username, args.Email, args.Gender, args.Birthdate, args.Favorite_Team)
        #print (query)
        db.query(query)

if args.Get_player_info:
    print ("\nDisplaying information for %s" % (args.Get_player_info))
    query = "SELECT * FROM player WHERE name ='%s'" % (args.Get_player_info) 
    #print (query)
    db.query(query) 
    r=db.store_result()
    r = r.fetch_row(maxrows = 0, how = 1)
    print("{:<15} {:<15} {:<10} {:<15} {:<35} {:<35} {:<35} {:<35}".format("Position", "Nationality", "Height", "Birthdate", "Home Club 2022/21", "Home Club 2021/20"
    , "Home Club 2020/19", "Home Club 2019/18"))
    for element in r:
        print("{:<15} {:<15} {:<10} {:<15} {:<35} {:<35} {:<35} {:<35}".format(element["position"].decode("utf-8"), element["nationality"].decode("utf-8"), element["height"].decode("utf-8"), element["birthdate"].decode("utf-8") 
        , element["Club_S4"].decode("utf-8"), element["Club_S3"].decode("utf-8") , element["Club_S2"].decode("utf-8") , element["Club_S1"].decode("utf-8") ))  

if args.Get_team_info:
    print ("\nDisplaying information for %s" % (args.Get_team_info))
    query = "SELECT * FROM club WHERE name ='%s'" % (args.Get_team_info) 
    #print (query)
    db.query(query) 
    r=db.store_result()
    r = r.fetch_row(maxrows = 0, how = 1)
    print("{:<35} {:<35}".format("Home Stadium Name", "Website"))
    for element in r:
        print("{:<35} {:<35}".format(element["home_stadium_name"].decode("utf-8"), element["website"].decode("utf-8") ))  

if args.Get_players_by_nationality:
    print ("\nPlayers with nationality of %s" % (args.Get_players_by_nationality))
    query = "SELECT name, Club_S4, Club_S3, Club_S2, Club_S1 FROM player WHERE nationality ='%s'" % (args.Get_players_by_nationality)
    #print (query)
    db.query(query) 
    r=db.store_result()
    r = r.fetch_row(maxrows = 0, how = 1)
    print("{:<30} {:<35} {:<35} {:<35} {:<35}".format("Player Name", "Home Club 2022/21", "Home Club 2021/20"
    , "Home Club 2020/19", "Home Club 2019/18"))
    for element in r:
        print("{:<30} {:<35} {:<35} {:<35} {:<35}".format(element["name"].decode("utf-8"), element["Club_S4"].decode("utf-8"),element["Club_S3"].decode("utf-8"),element["Club_S2"].decode("utf-8"),element["Club_S1"].decode("utf-8"))) 

if args.Get_players_by_position:
    print ("\nPlayers with position of %s" % (args.Get_players_by_position))
    query = "SELECT name FROM player WHERE position ='%s'" % (args.Get_players_by_position)
    #print (query)
    db.query(query) 
    r=db.store_result()
    r = r.fetch_row(maxrows = 0, how = 1)
    print("{:<30} ".format("Player Name"))
    for element in r:
        print("{:<30}".format(element["name"].decode("utf-8"))) 

if args.Get_HomeTeam_of_stadium:
    print ("The current home team of stadium: '%s'" % (args.Get_HomeTeam_of_stadium))
    query = "SELECT name FROM club WHERE home_stadium_name='%s'" % (args.Get_HomeTeam_of_stadium)
    #print (query)
    db.query(query) 
    r=db.store_result()
    r = r.fetch_row(maxrows = 0, how = 1)
    for element in r:
        print("{:<35}".format(element["name"].decode("utf-8"))) 


if args.Get_top10_by_HomeMatches:
  print ("Getting top 10 teams in terms of number home matches won...")
  query = "select count(homeTname) as count_of_home_wins, homeTname FROM matchh where (homeTgoals>awayTgoals) group by homeTname order by count_of_home_wins DESC limit 10"
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35} {:<35}".format("Team Name", "count_of_home_wins"))
  for element in r:
    print("{:<35} {:<35}".format(element["homeTname"].decode("utf-8"),element["count_of_home_wins"].decode("utf-8")))

if args.Get_top10_by_Matches:
  print ("Getting top 10 teams in terms of number matches won...")
  query ="select Team, SUM(`count_of_team_wins`)as total_wins from((select count(homeTname) as count_of_team_wins, homeTname as Team FROM matchh where (homeTgoals>awayTgoals) group by homeTname order by count_of_team_wins DESC) UNION (select count(awayTname) as count_of_team_wins, awayTname  as Team FROM matchh where (awayTgoals>homeTgoals) group by awayTname order by count_of_team_wins DESC) ) as T GROUP BY Team HAVING count(Team)>1 ORDER BY total_wins DESC LIMIT 10;"
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35} {:<35}".format("Team", "total_wins"))
  for element in r:
    print("{:<35} {:<35}".format(element["Team"].decode("utf-8"),element["total_wins"].decode("utf-8")))

if args.Get_top10_by_YellowCards:
  print ("Getting top 10 teams in terms of yellow cards...")
  query ="select Team, SUM(`more_yellows_count`)as total_more_yellows_count from ( (select count(homeTname) as more_yellows_count, homeTname as Team FROM matchh where (homeTyellows>awayTyellows) group by homeTname order by more_yellows_count DESC) UNION (select count(awayTname) as more_yellows_count, awayTname  as Team FROM matchh where (awayTyellows>homeTyellows) group by awayTname order by more_yellows_count DESC)) as T GROUP BY Team HAVING count(Team)>1 ORDER BY total_more_yellows_count DESC LIMIT 10;"
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35} {:<35}".format("Team", "total_more_yellows_count"))
  for element in r:
    print("{:<35} {:<35}".format(element["Team"].decode("utf-8"),element["total_more_yellows_count"].decode("utf-8")))

if args.Get_top10_by_fouls:
  print ("Getting top 10 teams in terms of fouls...")
  query ="select Team, SUM(`more_fouls_count`)as total_more_fouls_count from ((select count(homeTname) as more_fouls_count, homeTname as Team FROM matchh where (homeTfouls>awayTfouls) group by homeTname order by more_fouls_count DESC) UNION ( select count(awayTname) as more_fouls_count, awayTname  as Team FROM matchh where (awayTfouls>homeTfouls) group by awayTname order by more_fouls_count DESC)) as T GROUP BY Team HAVING count(Team)>1 ORDER BY total_more_fouls_count DESC LIMIT 10;"
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35} {:<35}".format("Team", "total_more_fouls_count"))
  for element in r:
    print("{:<35} {:<35}".format(element["Team"].decode("utf-8"),element["total_more_fouls_count"].decode("utf-8")))

if args.Get_top10_by_shots:
  print ("Getting top 10 teams in terms of shots...")
  query ="select Team, SUM(`more_shots_count`)as total_more_shots_count from ((select count(homeTname) as more_shots_count, homeTname as Team FROM matchh where (homeTshots>awayTshots) group by homeTname order by more_shots_count DESC) UNION(select count(awayTname) as more_shots_count, awayTname  as Team FROM matchh where (awayTshots>homeTshots) group by awayTname order by more_shots_count DESC) ) as T GROUP BY Team HAVING count(Team)>1 ORDER BY total_more_shots_count DESC LIMIT 10;"
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35} {:<35}".format("Team", "total_more_shots_count"))
  for element in r:
    print("{:<35} {:<35}".format(element["Team"].decode("utf-8"),element["total_more_shots_count"].decode("utf-8")))

if args.Get_top_team_of_season:
  print ("\nGet top team of season %s" % (args.Get_top_team_of_season))
  query = "select season, Team, SUM(`count_of_team_wins`)as total_wins from ((select season, count(homeTname) as count_of_team_wins, homeTname as Team FROM matchh where (homeTgoals>awayTgoals) group by homeTname,season order by count_of_team_wins DESC) UNION ( select season, count(awayTname) as count_of_team_wins, awayTname  as Team FROM matchh where (awayTgoals>homeTgoals) group by awayTname,season order by count_of_team_wins DESC) ) as T WHERE season='%s' GROUP BY Team,season HAVING count(Team)>1 ORDER BY total_wins DESC LIMIT 1;" % (args.Get_top_team_of_season)
  #print (query)
  db.query(query) 
  r=db.store_result()
  r = r.fetch_row(maxrows = 0, how = 1)
  print("\n{:<35}".format("Top Team"))
  for element in r:
    print("{:<35}".format(element["Team"].decode("utf-8")))

   

getshell()

getshell(height=400) # custom height of the terminal
 
# Add a new user review on a match
#python test.py -r -n melzahar2 -s "Old Trafford, Manchester" -d 2022-05-02 -t 4 -w good

# View existing reviews on a given match
#python test.py -v -s "Old Trafford, Manchester" -d 2022-05-02

# Register a user
#python test.py -u -e melzahar@aucegypt.edu -n mennaz -g f -b 2000-02-16 -f "Manchester United"

#python test.py --Get_player_info "Adam Lallana"
#python test.py --Get_team_info Brentford
#python test.py --Get_players_by_nationality England
#python test.py --Get_players_by_position Forward
#python test.py --Get_HomeTeam_of_stadium "Emirates Stadium"

#python test.py --Get_top10_by_HomeMatches
#python test.py --Get_top10_by_Matches
#python test.py --Get_top10_by_YellowCards
#python test.py --Get_top10_by_fouls
#python test.py --Get_top10_by_shots

#python test.py --Get_top_team_of_season 2018/2019